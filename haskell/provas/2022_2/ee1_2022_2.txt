--2022.2

1. (4.0) Run Length Encoding é um processo para comprimir caracteres quando
existe uma sequência longa de caracteres repetidos. O algoritmo funciona, por
exemplo, trocando zeros que se repetem em uma sequência (lista) de números por
zero seguido da quantidade de repetições:

Escreva uma função que comprime uma lista dessa forma, e outra que descomprime.
rlencode0 :: [Int] -> [Int]
rldecode0 :: [Int] -> [Int]
-- rlencode0 [17,8,54,0,0,0,97,5,16,0,45,23,0,0,0,0,0,3,67,0,0,8]
-- resultado: [17,8,54,0,3,97,5,16,0,1,45,23,0,5,3,67,0,2,8]
-- e rldecode0 faz o contrário

2. (4.0) Escreva duas funções que que fazem esse mesmo processo para
qualquer sequência de letras. Assuma que a lista não possui números, apenas
letras, e que no máximo as letras se repetem 9 vezes. Se a letra não é seguida
por um número é porque ela não se repete naquele momento. Por exemplo:
rlencodeLetras :: String -> String
rldecodeLetras :: String -> String
-- rlencodeLetras "abaaacdaaaabbbccxyz"
-- resultado: ”aba3cda4b3c2xyz”

3. (2.0) Dado um tipo de dados que representa letras únicas ou letras
repetidas:
data Letra = Unica Char
| Repetida Char Int
deriving Show
Implemente as mesmas funções da questão anterior de forma que a String seja
codificada ou decodificada para este tipo ao invés de diretamente para uma
outra String. Exemplo:
rlencodeLetrasCodigo :: String -> [Letra]
rldecodeLetrasCodigo :: [Letra] -> String
-- rlencodeLetrasCodigo "abaaacdaaaabbbccxyz"
-- resultado: [Unica ‘a’, Unica ‘b’, Repetida ‘a’ 3, Unica ‘c’, Unica ‘d’,
-- Repetida ‘a’ 4, Repetida ‘b’ 3, Repetida ‘c’ 2, Unica ‘x’,
-- Unica ‘y’, Unica ‘z’]
